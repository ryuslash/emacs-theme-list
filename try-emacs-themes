:;exec cask exec emacs -Q -l "$0" "$@" # -*- Emacs-Lisp -*-

(defvar screenshot-path
  (expand-file-name "screenshots/emacs"))

(defvar modes-path
  (expand-file-name "modes"))

(defun find-test-modes ()
  (cons nil
        (directory-files modes-path nil "^[^.]")))

(defun for-each-mode (func)
  (mapcar
   (lambda (mode)
     (load-mode mode)
     (funcall func mode))
   (find-test-modes)))

(defun load-mode (mode)
  (if mode
      (if (get-buffer mode)
          (switch-to-buffer mode)
        (find-file (format "%s/%s" modes-path mode)))
    (switch-to-buffer "*scratch*"))
  (sit-for 0.1))

(defun make-screenshot (mode name)
  (sit-for 0)
  (let ((mode (or mode "scratch")))
    (message "%s -- :)" name)
    (shell-command (format "scrot -u %s/%s-%s.png"
                           screenshot-path name mode))))

(defun try-all-themes ()
  (try-themes (custom-available-themes)))

(defun try-theme (theme)
  (load-theme theme :no-confirm)
  (for-each-mode
   (lambda (mode) (make-screenshot mode (symbol-name theme))))
  (disable-theme theme))

(defun try-themes (themes)
  (mapcar #'try-theme themes))

(setq custom-theme-load-path load-path)

(make-directory screenshot-path t)

(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)

(set-frame-size (selected-frame) 80 24)

(if command-line-args-left
    (try-themes (mapcar #'intern command-line-args-left))
  (try-all-themes))

(kill-emacs)
